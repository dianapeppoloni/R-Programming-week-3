## This second function calculates the inverse of the special "matrix" created 
## with the first one. First of all it verifies if the inverse of the makeCacheMatrix object has been already calculated.
## In case this value already exists, it gets the inverse from the cache 
## and skips the computation. If not, it calculates the matrix inverse
## and sets the resulting value in the cache through the 'setinverse' function. 

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
  
  inv <- x$getinverse() 
  if(!is.null(inv)) { 
    message("No cached data found. Recomputing.") 
    return(inv) 
  } 
  
  ## otherwise, it calculates the inverse 
  
  data <- x$get()
  inv <- solve(data, ...)
  
  ## it sets the value of the inverse in the cache via the setinverse function.
  
  x$setinverse(inv)
  
  return(inv)

}
